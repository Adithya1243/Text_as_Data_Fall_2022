{
  "hash": "fcdb04ee07f519ecc6d0efbd135dcbea",
  "result": {
    "markdown": "---\ntitle: \"Blog Post 3 - Data Cleaning and Categorising\"\nauthor: \"Adithya Parupudi\"\ndesription: \"Performed data cleaning and categorising.\"\ndate: \"30/10/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - Adithya Parupudi\n---\n\n\n# Libraries\n\nReading in all the libraries :)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(quanteda)\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(stringr)\nlibrary(tokenizers)\nlibrary(tm)\nlibrary(wordcloud)\nlibrary(wordcloud2)\nlibrary(stopwords)\nlibrary(tidyverse)\nlibrary(tidytext)\n\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\n# Reading Data\n\n### **From CSV**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset <- read_csv(\"./temp.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 100 Columns: 4\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(3): people_names, peoples_title, content dbl (1): ...1\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n:::\n\n```{.r .cell-code}\nhead(dataset)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n   ...1 people_names     peoples_title                                   content\n  <dbl> <chr>            <chr>                                           <chr>  \n1     1 Abraham Lincoln  Abraham Lincoln (1809 – 1865) US President dur… \"“With…\n2     2 Adolf Hitler     Adolf Hitler  (1889 – 1945) leader of Nazi Ger… \"Adolf…\n3     3 Albert Einstein  Albert Einstein (1879 – 1955) German scientist… \"Born …\n4     4 Alfred Hitchcock Mary Magdalene (4 BCE – 40CE) devotee of Jesus… \"Sir A…\n5     5 Amelia Earhart ( Amelia Earhart (1897 – 1937) Aviator            \"Ameli…\n6     6 Angelina Jolie   Angelina Jolie (1975 – ) Actress, director, hu… \"Angel…\n```\n:::\n:::\n\n\n# Data Extraction\n\n## By Year\n\nThere are many people in the list who are still alive. Hence the age range(eg. 1900-2000) is not complete which is causing code issues. Hence currently filling those cases with a pre-decided value of 2022. I have created two column names - from, to; to capture the age ranges\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# from\nfrom <-\n  dataset$peoples_title %>%\n  tolower() %>%\n  str_extract(., \"[0-9]+\\\\s\")\n\n# to\nto <-\n  dataset$peoples_title %>%\n  tolower() %>%\n  str_extract(., \"\\\\s[0-9]+\") %>%\n  replace(., is.na(.), \"2022\")\n\ndataset$from <- from\ndataset$to <- to\ncolnames(dataset)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"...1\"          \"people_names\"  \"peoples_title\" \"content\"      \n[5] \"from\"          \"to\"           \n```\n:::\n:::\n\n\n## By Profession\n\nRemoving unwanted terms using regex from peoples_title column, which provides a general summary of their title such as leader, founder, princess, actor etc\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset$peoples_title <-\n  dataset$peoples_title %>%\n  tolower() %>% # converting to lowercase\n  str_sort() %>%\n  str_extract(., \"\\\\).*\") %>% # extracting all text after ')'. Have to remove ')'\n  str_replace(., \"\\\\) \", \"\") %>% # replacing ) in all lines\n  str_remove_all(., \"\\\\)[0-9]*\") %>%\n  str_trim(., \"both\") %>%\n  str_remove_all(., \"[0-9]*\") %>%\n  str_trim(., \"right\") %>%\n  str_replace_all(\"[–|-|-|(|.]\", \"\") %>%\n  str_trim(., \"both\")\n```\n:::\n\n\nI have created pre-defined occupations to group all people accordingly. They are **politician, royalty, spiritual, businessman, entertainment, humanitarian, academia, sports,** and **others.** After categorising thoroughly there were still some people who did not fall into these categories. I've assigned those people with a **others** tag.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# only profession\n\npolitician <-\n  c(\n    \"president\",\n    \"leader\",\n    \"minister\",\n    \"first lady\",\n    \"wife\",\n    \"resistance\"\n  )\n\nroyalty <- c(\"heir\", \"throne\", \"monarch\", \"emperor\", \"princess\")\n\nspiritual <- c(\"devotee\", \"pope\")\n\nbusinessman <-\n  c(\n    \"founder\",\n    \"chairman\",\n    \"businessman\",\n    \"industrialist\",\n    \"entrepreneur\",\n    \"co-founder\"\n  )\n\nartist <-\n  c(\n    \"musician\",\n    \"singer\",\n    \"dancer\",\n    \"designer\",\n    \"painter\",\n    \"composer\",\n    \"poet\"\n  )\n\nentertainment <-\n  c(\"actress\", \"director\", \"producer\", \"playwright\", \"comedian\")\n\nhumanitarian <-\n  c(\n    \"humanitarian\",\n    \"rights\",\n    \"activist\",\n    \"independence\",\n    \"movement\",\n    \"nun\",\n    \"campaigner\",\n    \"charity\"\n  )\n\nacademia <-\n  c(\n    \"scientist\",\n    \"economist\",\n    \"author\",\n    \"economist\",\n    \"philosopher\",\n    \"inventor\",\n    \"microbiologist\"\n  )\n\nsports <-\n  c(\n    \"sport\",\n    \"football\",\n    \"baseball\",\n    \"golf\",\n    \"athlete\",\n    \"tennis\",\n    \"boxer\",\n    \"basketball\"\n  )\n\nothers <-\n  c(\n    \"explorer\",\n    \"dancer\",\n    \"designer\",\n    \"socialite\",\n    \"spy\",\n    \"model\",\n    \"astronaut\"\n  )\n\ndataset$profession <- with(\n  dataset,\n  case_when(\n    str_detect(dataset$peoples_title, paste(politician, collapse = \"|\")) ~ \"politician\",\n    str_detect(dataset$peoples_title, paste(royalty, collapse = \"|\")) ~ \"royalty\",\n    str_detect(dataset$peoples_title, paste(spiritual, collapse = \"|\")) ~ \"spiritual\",\n    str_detect(dataset$peoples_title, paste(businessman, collapse = \"|\")) ~ \"businessman\",\n    str_detect(dataset$peoples_title, paste(artist, collapse = \"|\")) ~ \"artist\",\n    str_detect(dataset$peoples_title, paste(entertainment, collapse = \"|\")) ~ \"entertainment\",\n    str_detect(dataset$peoples_title, paste(humanitarian, collapse = \"|\")) ~ \"humanitarian\",\n    str_detect(dataset$peoples_title, paste(academia, collapse = \"|\")) ~ \"academia\",\n    str_detect(dataset$peoples_title, paste(sports, collapse = \"|\")) ~ \"sports\",\n    str_detect(dataset$peoples_title, paste(others, collapse = \"|\")) ~ \"others\"\n  )\n)\n# head(dataset)\n\ndataset$profession <- dataset$profession %>% replace_na(., \"others\")\n\ndataset\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 100 × 7\n    ...1 people_names     peoples_title              content from  to    profe…¹\n   <dbl> <chr>            <chr>                      <chr>   <chr> <chr> <chr>  \n 1     1 Abraham Lincoln  us president during ameri… \"“With… \"180… \" 18… politi…\n 2     2 Adolf Hitler     leader of nazi germany     \"Adolf… \"188… \" 19… politi…\n 3     3 Albert Einstein  german scientist, theory … \"Born … \"187… \" 19… academ…\n 4     4 Alfred Hitchcock english / american film p… \"Sir A… \"4 \"  \" 40\" entert…\n 5     5 Amelia Earhart ( aviator                    \"Ameli… \"189… \" 19… others \n 6     6 Angelina Jolie   actress, director, humani… \"Angel… \"197… \"202… entert…\n 7     7 Audrey Hepburn   british actress and human… \"Audre… \"190… \" 20… entert…\n 8     8 Babe Ruth        american baseball player   \"‘Babe… \"198… \"202… sports \n 9     9 Barack Obama     us president               \"Barac… \"196… \" 20… politi…\n10    10 Benazir Bhutto   prime minister of pakistan \"Benaz… \"195… \" 20… politi…\n# … with 90 more rows, and abbreviated variable name ¹​profession\n```\n:::\n:::\n\n\n## By country\n\nSince this is a list of 100 people, there are people from all around the world. Hence I wanted to categorize them broadly in terms of their nationality. Hence I group them into the following variables - europe_countries, other_countries, south_america, Russia, America, British, India etc.\n\nSome countries appeared only once, while some others ( like India) appeared more then twice. So I thought it would be better to explicitly mentioned countries which appeared more frequently.\n\n\n::: {.cell}\n\n```{.r .cell-code}\neurope_countries <-\n  c(\n    \"italy\",\n    \"italian\",\n    \"swiss\",\n    \"polish\",\n    \"swedish\",\n    \"irish\",\n    \"macedonia\",\n    \"dutch\",\n    \"spanish\",\n    \"portugese\",\n    \"czech\",\n    \"greek\",\n    \"austria\"\n  )\nother_countries <-\n  c(\n    \"tibetan\",\n    \"russian\",\n    \"ethiopia\",\n    \"egypt\",\n    \"jamaica\",\n    \"burmese\",\n    \"africa\"\n  )\nsouth_america <- c(\"argentin\", \"cuba\", \"brazilian\")\npakistan <- c(\"pakistan\")\ndataset$country <- with(\n  dataset,\n  case_when(\n    str_detect(dataset$peoples_title, \"america|american|usa\") ~ \"america\",\n    str_detect(dataset$peoples_title, \"british|britain|english\") ~ \"british\",\n    str_detect(dataset$peoples_title, paste(europe_countries, collapse = \"|\")) ~ \"europe\",\n    str_detect(dataset$peoples_title, \"russia|soviet|russian\") ~ \"russia\",\n    str_detect(dataset$peoples_title, \"india\") ~ \"india\",\n    str_detect(dataset$peoples_title, \"^us\") ~ \"america\",\n    str_detect(dataset$peoples_title, \"german\") ~ \"germany\",\n    str_detect(dataset$peoples_title, \"france|french\") ~ \"france\",\n    str_detect(dataset$peoples_title, \"polish\") ~ \"poland\",\n    str_detect(dataset$peoples_title, paste(south_america, collapse = \"|\")) ~ \"south_america\",\n    str_detect(dataset$peoples_title, paste(pakistan, collapse = \"|\")) ~ \"pakistan\",\n    str_detect(dataset$peoples_title, paste(other_countries, collapse = \"|\")) ~ \"others\"\n  )\n)\n# table(dataset$country, useNA = \"always\")\n\n# replacing NA with others\ndataset$country <- dataset$country %>% replace_na(., \"others\")\n\ncolnames(dataset)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"...1\"          \"people_names\"  \"peoples_title\" \"content\"      \n[5] \"from\"          \"to\"            \"profession\"    \"country\"      \n```\n:::\n:::\n\n\n## By Gender\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset$gender <- with(\n  dataset,\n  case_when(\n    str_detect(dataset$content, \"\\\\bHis\\\\b\") ~ \"male\",\n    str_detect(dataset$content, \"\\\\bHer\\\\b\") ~ \"female\"\n  )\n)\n\n\ndataset$gender[13] <- \"male\"\ndataset$gender[14] <- \"male\"\ndataset$gender[55] <- \"male\"\ndataset$gender[64] <- \"female\"\ndataset$gender[86] <- \"male\"\n```\n:::\n\n\n# Data Cleaning of Biographies\n\nI've used stringr package to remove text such as \"adsbygoogle.com\" which came along with the scraped content. Also removing the last paragraph of each page, which had the links to further pages in the website.\n\nThis cleaning is done to all rows in the data set, but there are a few special characters that are still left to be cleaned. Writing regex had been difficult, but at least for the word cloud has a feature to ignore special characters :). I will have to find a way to generate dataset which is void of all special characters so that it doesn't effect the analysis in later stages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset$content <- dataset$content %>%\n  str_remove_all(., \"adsbygoogle\") %>%\n  str_remove_all(., \"www.biographyonline.net\") %>%\n  str_remove_all(., \"window.\") %>%\n  str_remove_all(., \".push\") %>%\n  gsub(\"Citation.*\", \"\", .)\n```\n:::\n\n\n## Updating the csv file\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(dataset, \"temp.csv\")\n```\n:::\n\n\n# Future Analysis\n\nI will dive deeper into visualizing the latest dataset, and try to incorporate my findings with word clouds. I will also explore text-mining packages in the upcoming posts.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}